import { ElementRef, TemplateRef } from '@angular/core';
import { MbscEventConnection, MbscNewEventData, MbscSlot } from '../../core/components/eventcalendar/eventcalendar.types';
import { IConnectionData, TimelineBase } from '../../core/components/eventcalendar/timeline/timeline';
import { MbscCalendarNavService } from '../../core/shared/calendar-nav/calendar-nav';
import { MbscCalendarEvent, MbscCalendarEventData, MbscResource } from '../../core/shared/calendar-view/calendar-view.types';
import { DateType, ITimezonePlugin } from '../../core/util/datetime';
import * as i0 from "@angular/core";
export declare class MbscTimeline extends TimelineBase {
    vScrollCont?: ElementRef;
    vGridCont?: ElementRef;
    vFooterCont?: ElementRef;
    vHeaderCont?: ElementRef;
    vResCont?: ElementRef;
    vSidebarCont?: ElementRef;
    vStickyFooter?: ElementRef;
    vStickyHeader?: ElementRef;
    vStickyDate?: ElementRef;
    vStickyMonth?: ElementRef;
    vStickyWeek?: ElementRef;
    set vCursorTimeCont(el: ElementRef);
    allDayText?: string;
    amText?: string;
    checkSize?: number;
    clickToCreate?: boolean | 'single' | 'double';
    colorsMap?: {
        [key: number]: MbscCalendarEvent[];
    };
    connections?: MbscEventConnection[];
    currentTimeIndicator?: boolean;
    dateFormat?: string;
    dateFormatLong?: string;
    dataTimezone?: string;
    dayNames?: string[];
    dayNamesMin?: string[];
    dayNamesShort?: string[];
    dayFooterTemplate?: TemplateRef<any>;
    dayTemplate?: TemplateRef<any>;
    displayTimezone?: string;
    dragTimeStep?: number;
    dragToCreate?: boolean;
    dragToMove?: boolean;
    dragToResize?: boolean;
    endDay?: number;
    endTime?: string;
    eventDragEnd?: (args: any) => void;
    eventMap: {
        [key: string]: MbscCalendarEvent[];
    };
    eventContentTemplate?: TemplateRef<any>;
    eventOrder?: (event1: MbscCalendarEvent, event2: MbscCalendarEvent) => number;
    eventTemplate?: TemplateRef<any>;
    exclusiveEndDates?: boolean;
    extendDefaultEvent?: (args: MbscNewEventData) => MbscCalendarEvent;
    externalDrop?: boolean;
    eventList?: boolean;
    firstDay?: number;
    fromText?: string;
    getDay?: (d: Date) => number;
    getDate?: (y: number, m: number, d: number, h?: number, i?: number, s?: number, u?: number) => Date;
    getMaxDayOfMonth?: (y: number, m: number) => number;
    getMonth?: (d: Date) => number;
    getWeekNumber?: (d: Date) => number;
    getYear?: (d: Date) => number;
    groupBy?: 'date' | 'resource';
    height?: number;
    invalidateEvent?: 'start-end' | 'strict';
    invalidsMap?: {
        [key: number]: MbscCalendarEvent[];
    };
    maxDate?: number;
    minDate?: number;
    navigateToEvent?: MbscCalendarEvent;
    monthNames?: string[];
    monthNamesShort?: string[];
    navigationService?: MbscCalendarNavService;
    newEventText?: string;
    nextIcon?: string;
    nextIconRtl?: string;
    downIcon?: string;
    pmText?: string;
    refDate?: DateType;
    resolution?: 'year' | 'month' | 'week' | 'day' | 'hour';
    resolutionVertical?: 'day' | 'none';
    resources?: MbscResource[] | null;
    resourceFooterTemplate?: TemplateRef<any>;
    resourceHeaderTemplate?: TemplateRef<any>;
    resourceTemplate?: TemplateRef<any>;
    rowHeight?: 'variable' | 'equal';
    scroll?: number;
    selected?: number;
    selectedEventsMap: {
        [key: string]: MbscCalendarEvent;
    };
    showAllDay?: boolean;
    showDays?: boolean;
    showEventTooltip?: boolean;
    sidebarFooterTemplate?: TemplateRef<any>;
    sidebarHeaderTemplate?: TemplateRef<any>;
    sidebarTemplate?: TemplateRef<any>;
    size?: number;
    slots?: MbscSlot[] | null;
    slotTemplate?: TemplateRef<any>;
    startDay?: number;
    startTime?: string;
    timeCellStep?: number;
    timeFormat?: string;
    timeLabelStep?: number;
    timezonePlugin?: ITimezonePlugin;
    toText?: string;
    type?: 'week' | 'day' | 'month' | 'year';
    virtualScroll?: boolean;
    weekNumbers?: boolean;
    weekText?: string;
    width?: number;
    onActiveChange: (args: any) => void;
    onCellClick: (args: any) => void;
    onCellDoubleClick: (args: any) => void;
    onCellRightClick: (args: any) => void;
    onEventClick: (args: any) => void;
    onEventDoubleClick: (args: any) => void;
    onEventRightClick: (args: any) => void;
    onEventHoverIn: (args: any) => void;
    onEventHoverOut: (args: any) => void;
    onEventDelete: (args: any) => void;
    onEventDragEnd?: (args: any) => void;
    onEventDragStart?: (args: any) => void;
    onResourceCollapse?: (args: any) => void;
    onResourceExpand?: (args: any) => void;
    onWeekDayClick?: (args: any) => void;
    _defId: string;
    _oneDay: number;
    _checkDisplay(event: MbscCalendarEventData | IConnectionData, checkDrag?: boolean): boolean;
    _getDayKey(index: number, day: any): number;
    _getEventArgs(dayEvents: any, slot: any, v: number, event: any, resource: string | number): {
        date: Date;
        domEvent: any;
        resource: string | number;
        slot: any;
        source: string;
    };
    _getEventKey(index: number, data: any): any;
    _getDragKey(resourceId: number | string, slotId: string | number, dateKey: string): string;
    _getId(index: number, data: any): any;
    _getRowKey(index: number, rowGroup: any): any;
    protected _mounted(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<MbscTimeline, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<MbscTimeline, "mbsc-timeline", never, { "allDayText": "allDayText"; "amText": "amText"; "checkSize": "checkSize"; "clickToCreate": "clickToCreate"; "colorsMap": "colorsMap"; "connections": "connections"; "currentTimeIndicator": "currentTimeIndicator"; "dateFormat": "dateFormat"; "dateFormatLong": "dateFormatLong"; "dataTimezone": "dataTimezone"; "dayNames": "dayNames"; "dayNamesMin": "dayNamesMin"; "dayNamesShort": "dayNamesShort"; "dayFooterTemplate": "dayFooterTemplate"; "dayTemplate": "dayTemplate"; "displayTimezone": "displayTimezone"; "dragTimeStep": "dragTimeStep"; "dragToCreate": "dragToCreate"; "dragToMove": "dragToMove"; "dragToResize": "dragToResize"; "endDay": "endDay"; "endTime": "endTime"; "eventDragEnd": "eventDragEnd"; "eventMap": "eventMap"; "eventContentTemplate": "eventContentTemplate"; "eventOrder": "eventOrder"; "eventTemplate": "eventTemplate"; "exclusiveEndDates": "exclusiveEndDates"; "extendDefaultEvent": "extendDefaultEvent"; "externalDrop": "externalDrop"; "eventList": "eventList"; "firstDay": "firstDay"; "fromText": "fromText"; "getDay": "getDay"; "getDate": "getDate"; "getMaxDayOfMonth": "getMaxDayOfMonth"; "getMonth": "getMonth"; "getWeekNumber": "getWeekNumber"; "getYear": "getYear"; "groupBy": "groupBy"; "height": "height"; "invalidateEvent": "invalidateEvent"; "invalidsMap": "invalidsMap"; "maxDate": "maxDate"; "minDate": "minDate"; "navigateToEvent": "navigateToEvent"; "monthNames": "monthNames"; "monthNamesShort": "monthNamesShort"; "navigationService": "navigationService"; "newEventText": "newEventText"; "nextIcon": "nextIcon"; "nextIconRtl": "nextIconRtl"; "downIcon": "downIcon"; "pmText": "pmText"; "refDate": "refDate"; "resolution": "resolution"; "resolutionVertical": "resolutionVertical"; "resources": "resources"; "resourceFooterTemplate": "resourceFooterTemplate"; "resourceHeaderTemplate": "resourceHeaderTemplate"; "resourceTemplate": "resourceTemplate"; "rowHeight": "rowHeight"; "scroll": "scroll"; "selected": "selected"; "selectedEventsMap": "selectedEventsMap"; "showAllDay": "showAllDay"; "showDays": "showDays"; "showEventTooltip": "showEventTooltip"; "sidebarFooterTemplate": "sidebarFooterTemplate"; "sidebarHeaderTemplate": "sidebarHeaderTemplate"; "sidebarTemplate": "sidebarTemplate"; "size": "size"; "slots": "slots"; "slotTemplate": "slotTemplate"; "startDay": "startDay"; "startTime": "startTime"; "timeCellStep": "timeCellStep"; "timeFormat": "timeFormat"; "timeLabelStep": "timeLabelStep"; "timezonePlugin": "timezonePlugin"; "toText": "toText"; "type": "type"; "virtualScroll": "virtualScroll"; "weekNumbers": "weekNumbers"; "weekText": "weekText"; "width": "width"; "onActiveChange": "onActiveChange"; "onCellClick": "onCellClick"; "onCellDoubleClick": "onCellDoubleClick"; "onCellRightClick": "onCellRightClick"; "onEventClick": "onEventClick"; "onEventDoubleClick": "onEventDoubleClick"; "onEventRightClick": "onEventRightClick"; "onEventHoverIn": "onEventHoverIn"; "onEventHoverOut": "onEventHoverOut"; "onEventDelete": "onEventDelete"; "onEventDragEnd": "onEventDragEnd"; "onEventDragStart": "onEventDragStart"; "onResourceCollapse": "onResourceCollapse"; "onResourceExpand": "onResourceExpand"; "onWeekDayClick": "onWeekDayClick"; }, {}, never, never>;
}
