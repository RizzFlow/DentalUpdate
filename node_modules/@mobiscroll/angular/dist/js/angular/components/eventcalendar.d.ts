import { ElementRef, EventEmitter, OnInit, TemplateRef } from '@angular/core';
import { EventcalendarBase } from '../../core/components/eventcalendar/eventcalendar';
import { MbscCellClickEvent, MbscCellHoverEvent, MbscEventcalendarOptions, MbscEventcalendarState, MbscEventcalendarView, MbscEventClickEvent, MbscEventConnection, MbscEventCreatedEvent, MbscEventCreateEvent, MbscEventCreateFailedEvent, MbscEventDeletedEvent, MbscEventDeleteEvent, MbscEventDragEvent, MbscEventUpdatedEvent, MbscEventUpdateEvent, MbscEventUpdateFailedEvent, MbscLabelClickEvent, MbscNewEventData, MbscPageChangeEvent, MbscPageLoadedEvent, MbscPageLoadingEvent, MbscResourceCollapseEvent, MbscResourceExpandEvent, MbscSelectedDateChangeEvent, MbscSelectedEventsChangeEvent, MbscSlot } from '../../core/components/eventcalendar/eventcalendar.types';
import { ICalendarViewHost, MbscCalendarColor, MbscCalendarEvent, MbscCalendarEventData, MbscCalendarLabel, MbscCalendarMarked, MbscResource } from '../../core/shared/calendar-view/calendar-view.types';
import { DateType, ITimezonePlugin } from '../../core/util/datetime';
import { MbscCalendarView } from '../shared/calendar-view';
import { MbscInstanceService } from '../shared/instance.service';
import { MbscListItem } from './list-item';
import * as i0 from "@angular/core";
export declare class MbscEventListService {
    days: any;
    static ɵfac: i0.ɵɵFactoryDeclaration<MbscEventListService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<MbscEventListService>;
}
export declare class MbscEventListDayDirective implements OnInit {
    private el;
    private els;
    timestamp: number;
    constructor(el: ElementRef, els: MbscEventListService);
    ngOnInit(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<MbscEventListDayDirective, [null, { optional: true; }]>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<MbscEventListDayDirective, "[mbsc-event-list-day]", never, { "timestamp": "timestamp"; }, {}, never>;
}
export declare class MbscEventListItem extends MbscListItem {
    eventData: MbscCalendarEventData;
    selected?: boolean;
    showColor?: boolean;
    template?: TemplateRef<any>;
    eventContentTemplate?: TemplateRef<any>;
    static ɵfac: i0.ɵɵFactoryDeclaration<MbscEventListItem, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<MbscEventListItem, "mbsc-event-list-item", never, { "eventData": "eventData"; "selected": "selected"; "showColor": "showColor"; "template": "template"; "eventContentTemplate": "eventContentTemplate"; }, {}, never, never>;
}
/**
 * The Eventcalendar component.
 *
 * Usage:
 *
 * ```
 * <mbsc-eventcalendar></mbsc-eventcalendar>
 * ```
 */
export declare class MbscEventcalendar extends EventcalendarBase implements ICalendarViewHost {
    /** @hidden */
    _hours: number[];
    /** @hidden */
    _els: MbscEventListService;
    /** @hidden */
    _instanceService: MbscInstanceService;
    /** @hidden */
    vList?: ElementRef;
    /** @hidden */
    _calendarView: MbscCalendarView;
    /** {@inheritDoc MbscEventcalendarOptions.actionableEvents} */
    actionableEvents?: boolean;
    /**
     * Template reference for [custom agenda rendering](https://docs.mobiscroll.com/angular/eventcalendar#custom-agenda-template).
     * The template data is an array containing the events of the current view, grouped by day. A day object has the following properties:
     * - `date`: String - The formatted date of the day.
     * - `events`: Array - The list of events for the day. An event object has the following properties:
     *    - `allDay`: String - The localized all-day text in case of all day events.
     *    - `end`: String - The formatted end time, if the event is not all day.
     *    - `id`: String - The id of the event.
     *    - `isMultiDay`: Boolean - True if the event spans across multiple days.
     *    - `lastDay`: Boolean - True if it's rendered on the last day of a multiple event.
     *    - `original`: Object - The original event object.
     *    - `start`: String - The formatted start time, if the event is not all day.
     *    - `title`: String - The title of the event.
     * - `timestamp`: Number - The timestamp of the day
     */
    agendaTemplate?: TemplateRef<any>;
    /** {@inheritDoc MbscEventcalendarOptions.calendarSystem} */
    calendarSystem?: any;
    /** {@inheritDoc MbscEventcalendarOptions.clickToCreate} */
    clickToCreate?: boolean | 'double' | 'single';
    /** {@inheritDoc MbscEventcalendarOptions.colors} */
    colors?: MbscCalendarColor[];
    /** {@inheritDoc MbscEventcalendarOptions.connections} */
    connections?: MbscEventConnection[];
    /** {@inheritDoc MbscEventcalendarOptions.data} */
    data?: MbscCalendarEvent[];
    /**
     * Template reference to customize the day cells of the calendar view and the header date containers
     * in case of the schedule and timeline view.
     * It takes a function that should return the desired markup.
     * The Eventcalendar will take care of the positioning,
     * but everything else (like background color, hover effect, etc.) is left to you.
     *
     * If you are looking to customize only the content and don't want to bother with the styling of the event,
     * you can use the [dayContentTemplate](#dayContentTemplate) option.
     *
     * The template will receive an object as data. This data can be used to show day specific things on the Eventcalendar.
     * The object passed to the template has the following properties:
     * - `date`: Date object - The specific date as a Date object.
     * - `selected`: Boolean - True if the date is selected. (In case of calendar view)
     * - `events`: Array - The list of events of the day.
     * - `resource`: String, Number - The id of the resource in case of scheduler(week and month views)
     * when the events are grouped by resources.
     * - `isActive`: Boolean - On the timeline view, this parameter will be true when rendering the current day/week/month/year
     *
     */
    dayTemplate?: TemplateRef<any>;
    /**
     * You can use dayContentTemplate option to customize the day cells of the Eventcalendar.
     * You will get the styling taken care of by the Eventcalendar,
     * and you can focus on what you show besides the day number a.k.a. the content.
     *
     * If you are looking to fully customize the day (ex. add custom hover effect)
     * you will need to use the [dayTemplate](#dayTemplate) option.
     * In that case you will only get the positioning done by the Eventcalendar and everything else is up to you.
     *
     * The template will receive an object as data. This data can be used to show day specific things on the Eventcalendar.
     * The object passed to the template has the following properties:
     * - `date`: Date object - The specific date as a Date object.
     * - `selected`: Boolean - True if the date is selected. (In case of calendar view)
     * - `events`: Array - The list of events of the day.
     * - `resource`: String, Number - The id of the resource in case of scheduler(week and month views)
     * when the events are grouped by resources.
     */
    dayContentTemplate?: TemplateRef<any>;
    dayFooterTemplate?: TemplateRef<any>;
    /** {@inheritDoc MbscEventcalendarOptions.dataTimezone} */
    dataTimezone?: string;
    /** {@inheritDoc MbscEventcalendarOptions.displayTimezone} */
    displayTimezone?: string;
    /** {@inheritDoc MbscEventcalendarOptions.dragTimeStep} */
    dragTimeStep?: number;
    /** {@inheritDoc MbscEventcalendarOptions.dragToCreate} */
    dragToCreate?: boolean;
    /** {@inheritDoc MbscEventcalendarOptions.dragToResize} */
    dragToResize?: boolean;
    /** {@inheritDoc MbscEventcalendarOptions.dragToMove} */
    dragToMove?: boolean;
    eventContentTemplate?: TemplateRef<any>;
    /** {@inheritDoc MbscEventcalendarOptions.eventDelete} */
    eventDelete?: boolean;
    /** {@inheritDoc MbscEventcalendarOptions.} */
    eventOrder?: (event1: MbscCalendarEvent, event2: MbscCalendarEvent) => number;
    eventTemplate?: TemplateRef<any>;
    /** {@inheritDoc MbscEventcalendarOptions.exclusiveEndDates} */
    exclusiveEndDates?: boolean;
    /** {@inheritDoc MbscEventcalendarOptions.extendDefaultEvent} */
    extendDefaultEvent?: (args: MbscNewEventData) => MbscCalendarEvent;
    /** {@inheritDoc MbscEventcalendarOptions.externalDrop} */
    externalDrop?: boolean;
    /** {@inheritDoc MbscEventcalendarOptions.groupBy} */
    groupBy?: 'date' | 'resource';
    headerTemplate?: TemplateRef<any>;
    /** {@inheritDoc MbscEventcalendarOptions.height} */
    height?: number | string;
    /** {@inheritDoc MbscEventcalendarOptions.invalid} */
    invalid?: any[];
    /** {@inheritDoc MbscEventcalendarOptions.invalidateEvent} */
    invalidateEvent?: 'start-end' | 'strict';
    labelContentTemplate?: TemplateRef<any>;
    /** {@inheritDoc MbscEventcalendarOptions.labels} */
    labels?: MbscCalendarLabel[];
    labelTemplate?: TemplateRef<any>;
    /** {@inheritDoc MbscEventcalendarOptions.marked} */
    marked?: MbscCalendarMarked[];
    /** {@inheritDoc MbscEventcalendarOptions.max} */
    max?: DateType;
    /** {@inheritDoc MbscEventcalendarOptions.min} */
    min?: DateType;
    /** {@inheritDoc MbscEventcalendarOptions.mousewheel} */
    mousewheel?: boolean;
    /** {@inheritDoc MbscEventcalendarOptions.refDate} */
    refDate?: DateType;
    /** {@inheritDoc MbscEventcalendarOptions.resources} */
    resources?: MbscResource[] | null;
    /**
     * Template reference to customize the empty cell content above the resource column.
     * In the template you can use custom components as well.
     *
     * Example:
     * ```
     * <ng-template #customHeaderTemplate>
     *   <div>Resources</div>
     * </ng-template>
     * ```
     */
    resourceHeaderTemplate?: TemplateRef<any>;
    /**
     * Template reference to to customize the empty cell content below the resource column.
     *
     * Example:
     * ```
     * <ng-template #customTemplate>
     *     <div>Resource footer</div>
     * </ng-template>
     * ```
     */
    resourceFooterTemplate?: TemplateRef<any>;
    /**
     * Template reference to customize the resource template of the Scheduler/Timeline views.
     * In the template you can use custom components as well.
     *
     * Example:
     * ```
     * <ng-template #customTemplate let-resource>
     *   <div>{{resource.name}}</div>
     *     <p>{{resource.description}}</p>
     *   <img [src]="resource.img" />
     * </ng-template>
     * ```
     */
    resourceTemplate?: TemplateRef<any>;
    /** {@inheritDoc MbscEventcalendarOptions.slots} */
    slots?: MbscSlot[] | null;
    /**
     * Template reference to customize the slot template of the Timeline view.
     * In the template you can use custom components as well.
     *
     * It will recieve an object as parameter and has the following properties:
     * - `date`: Date object - The specific date where the slot is rendered.
     * - `slot`: Object - Data of the rendered slot.
     *
     * Example:
     * ```
     * <ng-template #customTemplate let-slotdata>
     *   <div>{{slotdata.slot.name}}</div>
     *   <p>{{slotdata.slot.description}}</p>
     *   <img [src]="slotdata.slot.img" />
     * </ng-template>
     * ```
     */
    slotTemplate?: TemplateRef<any>;
    /**
     * Template reference to customize the event content, that appear on the scheduler.
     * You will get the event styling taken care of by the Eventcalendar,
     * and you can focus on what you show inside of the events a.k.a. the content.
     *
     * If you are looking to fully customize the event (ex. add custom hover effect)
     * you will need to use the [scheduleEventTemplate](#scheduleEventTemplate) option.
     * In that case you will only get the positioning done by the Eventcalendar and everything else is up to you.
     *
     * For customizing the events on other part of the Eventcalendar check out the
     * [customizing the events section](https://docs.mobiscroll.com/angular/eventcalendar#custom-event-template).
     *
     * The template will receive an event object as data. This data can be used to show event specific things on the scheduler.
     * The object passed to the template has computed properties, as well as a reference to the **original** event it comes from:
     * - `allDay`: String - Computed property. It holds the localized all-day text in case of all day events.
     * - `end`: String - Computed property. It holds the formatted end time, if the event is not all day.
     * - `id`: String - It holds the id of the event. If there's no id on the event object, this property is generated.
     * - `isMultiDay`: Boolean - Computed property. It's true if the event spans across multiple days.
     * - `lastDay`: Boolean - Computed property. It's true if it's rendered on the last day of a multiple event.
     * - `original`: Object - Reference to the original event object. Any custom property on the event can be access through this property.
     * - `start`: String - Computed property. It holds the formatted start time, if the event is not all day.
     * - `title`: String - The title of the event.
     * - `currentResource`: String, Number - Represents the resource of the row or column where the event is being rendered.
     */
    scheduleEventContentTemplate?: TemplateRef<any>;
    /**
     * Template reference  to fully customize the events that appear on the scheduler.
     * The Eventcalendar will take care of the positioning of the event,
     * but everything else (like background color, hover effect, etc...) is left to you.
     *
     * If you are looking to customize only the content (ex. add custom elements) and don't want to bother with the styling of the event,
     * you can use the [scheduleEventContentTemplate](#scheduleEventContentTemplate) option.
     *
     * For customizing the events on other part of the Eventcalendar check out the [
     * customizing the events section](https://docs.mobiscroll.com/angular/eventcalendar#custom-event-template).
     *
     * The template will receive an event object as data. This data can be used to show event specific things on the scheduler.
     * The object passed to the template has computed properties, as well as a reference to the **original** event it comes from:
     * - `allDay`: String - Computed property. It holds the localized all-day text in case of all day events.
     * - `end`: String - Computed property. It holds the formatted end time, if the event is not all day.
     * - `id`: String - It holds the id of the event. If there's no id on the event object, this property is generated.
     * - `isMultiDay`: Boolean - Computed property. It's true if the event spans across multiple days.
     * - `lastDay`: Boolean - Computed property. It's true if it's rendered on the last day of a multiple event.
     * - `original`: Object - Reference to the original event object. Any custom property on the event can be access through this property.
     * - `start`: String - Computed property. It holds the formatted start time, if the event is not all day.
     * - `title`: String - The title of the event.
     * - `currentResource`: String, Number - Represents the resource of the row or column where the event is being rendered.
     */
    scheduleEventTemplate?: TemplateRef<any>;
    /** {@inheritDoc MbscEventcalendarOptions.selectedDate} */
    selectedDate: DateType;
    /** {@inheritDoc MbscEventcalendarOptions.onSelectedDateChange} */
    selectedDateChange: EventEmitter<DateType>;
    /** {@inheritDoc MbscEventcalendarOptions.selectedEvents} */
    selectedEvents?: MbscCalendarEvent[];
    /** {@inheritDoc MbscEventcalendarOptions.onSelectedEventsChange} */
    selectedEventsChange: EventEmitter<MbscCalendarEvent[]>;
    /** {@inheritDoc MbscEventcalendarOptions.selectMultipleEvents} */
    selectMultipleEvents?: boolean;
    /** {@inheritDoc MbscEventcalendarOptions.showControls} */
    showControls?: boolean;
    /** {@inheritDoc MbscEventcalendarOptions.showEventTooltip} */
    showEventTooltip?: boolean;
    /**
     * Template reference to customize the empty cell content below the sidebar column.
     * This element only renders for the timeline view, if the [sidebarTemplate](#sidebarTemplate) is present.
     *
     * Example:
     * ```
     * <ng-template #customTemplate>
     *   <div>Sidebar footer</div>
     * </ng-template>
     * ```
     */
    sidebarFooterTemplate?: TemplateRef<any>;
    /**
     * Template reference to customize the empty cell content above the sidebar column.
     * This element only renders for the timeline view, if the [sidebarTemplate](#sidebarTemplate) is present.
     *
     * Example:
     * ```
     * <ng-template #customTemplate>
     *   <div>Sidebar header</div>
     * </ng-template>
     * ```
     */
    sidebarHeaderTemplate?: TemplateRef<any>;
    /**
     * Template reference to customize the sidebar template on the right side of the timeline.
     *
     * The template will receive the resource object as data. This data can be used to show resource specific things on the sidebar.
     *
     * Example:
     * ```
     * <ng-template #customTemplate let-resource>
     *   <div>{{resource.name}}</div>
     *   <p>{{resource.description}}</p>
     *   <img [src]="resource.img" />
     * </ng-template>
     * ```
     */
    sidebarTemplate?: TemplateRef<any>;
    /** {@inheritDoc MbscEventcalendarOptions.valid} */
    valid?: any[];
    /** {@inheritDoc MbscEventcalendarOptions.view} */
    view?: MbscEventcalendarView;
    /** {@inheritDoc MbscEventcalendarOptions.width} */
    width?: number | string;
    /**
     * {@inheritDoc MbscEventcalendarOptions.allDayText}
     * @group Localizations
     */
    allDayText?: string;
    /**
     * {@inheritDoc MbscEventcalendarOptions.amText}
     * @group Localizations
     */
    amText?: string;
    /**
     * {@inheritDoc MbscEventcalendarOptions.dateFormat}
     * @group Localizations
     */
    dateFormat?: string;
    /**
     * {@inheritDoc MbscEventcalendarOptions.dateFormatLong}
     * @group Localizations
     */
    dateFormatLong?: string;
    /**
     * {@inheritDoc MbscEventcalendarOptions.dayNames}
     * @group Localizations
     */
    dayNames?: string[];
    /**
     * {@inheritDoc MbscEventcalendarOptions.dayNamesMin}
     * @group Localizations
     */
    dayNamesMin?: string[];
    /**
     * {@inheritDoc MbscEventcalendarOptions.dayNamesShort}
     * @group Localizations
     */
    dayNamesShort?: string[];
    /**
     * {@inheritDoc MbscEventcalendarOptions.eventsText}
     * @group Localizations
     */
    eventsText?: string;
    /**
     * {@inheritDoc MbscEventcalendarOptions.eventText}
     * @group Localizations
     */
    eventText?: string;
    /**
     * {@inheritDoc MbscEventcalendarOptions.firstDay}
     * @group Localizations
     */
    firstDay?: number;
    /**
     * {@inheritDoc MbscEventcalendarOptions.monthNames}
     * @group Localizations
     */
    monthNames?: string[];
    /**
     * {@inheritDoc MbscEventcalendarOptions.monthNamesShort}
     * @group Localizations
     */
    monthNamesShort?: string[];
    /**
     * {@inheritDoc MbscEventcalendarOptions.moreEventsPluralText}
     * @group Localizations
     */
    moreEventsPluralText?: string;
    /**
     * {@inheritDoc MbscEventcalendarOptions.moreEventsText}
     * @group Localizations
     */
    moreEventsText?: string;
    /**
     * {@inheritDoc MbscEventcalendarOptions.newEventText}
     * @group Localizations
     */
    newEventText?: string;
    /**
     * {@inheritDoc MbscEventcalendarOptions.nextPageText}
     * @group Localizations
     */
    nextPageText?: string;
    /**
     * {@inheritDoc MbscEventcalendarOptions.noEventsText}
     * @group Localizations
     */
    noEventsText?: string;
    /**
     * {@inheritDoc MbscEventcalendarOptions.pmText}
     * @group Localizations
     */
    pmText?: string;
    /**
     * {@inheritDoc MbscEventcalendarOptions.prevPageText}
     * @group Localizations
     */
    prevPageText?: string;
    /**
     * {@inheritDoc MbscEventcalendarOptions.timeFormat}
     * @group Localizations
     */
    timeFormat?: string;
    /**
     * {@inheritDoc MbscEventcalendarOptions.timezonePlugin}
     * @group Localizations
     */
    timezonePlugin?: ITimezonePlugin;
    /**
     * @event
     * {@inheritDoc MbscEventcalendarOptions.onCellClick}
     */
    onCellClick: EventEmitter<MbscCellClickEvent>;
    /**
     * @event
     * {@inheritDoc MbscEventcalendarOptions.onCellDoubleClick}
     */
    onCellDoubleClick: EventEmitter<MbscCellClickEvent>;
    /**
     * @event
     * {@inheritDoc MbscEventcalendarOptions.onCellRightClick}
     */
    onCellRightClick: EventEmitter<MbscCellClickEvent>;
    /**
     * @event
     * {@inheritDoc MbscEventcalendarOptions.onCellHoverIn}
     */
    onCellHoverIn: EventEmitter<MbscCellHoverEvent>;
    /**
     * @event
     * {@inheritDoc MbscEventcalendarOptions.onCellHoverOut}
     */
    onCellHoverOut: EventEmitter<MbscCellHoverEvent>;
    /**
     * @event
     * {@inheritDoc MbscEventcalendarOptions.onEventClick}
     */
    onEventClick: EventEmitter<MbscEventClickEvent>;
    /**
     * @event
     * {@inheritDoc MbscEventcalendarOptions.onEventDoubleClick}
     */
    onEventDoubleClick: EventEmitter<MbscEventClickEvent>;
    /**
     * @event
     * {@inheritDoc MbscEventcalendarOptions.onEventRightClick}
     */
    onEventRightClick: EventEmitter<MbscEventClickEvent>;
    /**
     * @event
     * {@inheritDoc MbscEventcalendarOptions.onEventHoverIn}
     */
    onEventHoverIn: EventEmitter<MbscEventClickEvent>;
    /**
     * @event
     * {@inheritDoc MbscEventcalendarOptions.onEventHoverOut}
     */
    onEventHoverOut: EventEmitter<MbscEventClickEvent>;
    /**
     * @event
     * {@inheritDoc MbscEventcalendarOptions.onEventCreate}
     */
    onEventCreate: EventEmitter<MbscEventCreateEvent>;
    /**
     * @event
     * {@inheritDoc MbscEventcalendarOptions.onEventCreated}
     */
    onEventCreated: EventEmitter<MbscEventCreatedEvent>;
    /**
     * @event
     * {@inheritDoc MbscEventcalendarOptions.onEventDelete}
     */
    onEventDelete: EventEmitter<MbscEventDeleteEvent>;
    /**
     * @event
     * {@inheritDoc MbscEventcalendarOptions.onEventDeleted}
     */
    onEventDeleted: EventEmitter<MbscEventDeletedEvent>;
    /**
     * @event
     * {@inheritDoc MbscEventcalendarOptions.onEventDragEnd}
     */
    onEventDragEnd: EventEmitter<MbscEventDragEvent>;
    /**
     * @event
     * {@inheritDoc MbscEventcalendarOptions.onEventDragStart}
     */
    onEventDragStart: EventEmitter<MbscEventDragEvent>;
    /**
     * @event
     * {@inheritDoc MbscEventcalendarOptions.onEventUpdate}
     */
    onEventUpdate: EventEmitter<MbscEventUpdateEvent>;
    /**
     * @event
     * {@inheritDoc MbscEventcalendarOptions.onEventUpdated}
     */
    onEventUpdated: EventEmitter<MbscEventUpdatedEvent>;
    /**
     * @event
     * {@inheritDoc MbscEventcalendarOptions.onEventCreateFailed}
     */
    onEventCreateFailed: EventEmitter<MbscEventCreateFailedEvent>;
    /**
     * @event
     * {@inheritDoc MbscEventcalendarOptions.onEventUpdateFailed}
     */
    onEventUpdateFailed: EventEmitter<MbscEventUpdateFailedEvent>;
    /**
     * @event
     * {@inheritDoc MbscEventcalendarOptions.onLabelClick}
     */
    onLabelClick: EventEmitter<MbscLabelClickEvent>;
    /**
     * @event
     * {@inheritDoc MbscEventcalendarOptions.onSelectedEventsChange}
     */
    onSelectedEventsChange: EventEmitter<MbscSelectedEventsChangeEvent>;
    /**
     * @event
     * {@inheritDoc MbscEventcalendarOptions.onPageChange}
     */
    onPageChange: EventEmitter<MbscPageChangeEvent>;
    /**
     * @event
     * {@inheritDoc MbscEventcalendarOptions.onPageLoaded}
     */
    onPageLoaded: EventEmitter<MbscPageLoadedEvent>;
    /**
     * @event
     * {@inheritDoc MbscEventcalendarOptions.onPageLoading}
     */
    onPageLoading: EventEmitter<MbscPageLoadingEvent>;
    /**
     * @event
     * {@inheritDoc MbscEventcalendarOptions.onResourceCollapse}
     */
    onResourceCollapse: EventEmitter<MbscResourceCollapseEvent>;
    /**
     * @event
     * {@inheritDoc MbscEventcalendarOptions.onResourceExpand}
     */
    onResourceExpand: EventEmitter<MbscResourceExpandEvent>;
    /**
     * @event
     * {@inheritDoc MbscEventcalendarOptions.onSelectedDateChange}
     */
    onSelectedDateChange: EventEmitter<MbscSelectedDateChangeEvent>;
    /** @hidden */
    _getEventArgs(eventList: any, $event: any, event: any): {
        date: any;
        domEvent: any;
        event: any;
        source: string;
    };
    /** @hidden */
    _getPopoverEventArgs(state: any, $event: any, event: any): {
        date: any;
        domEvent: any;
        event: any;
        source: string;
    };
    protected _ctor(): void;
    protected _mounted(): void;
    protected _render(s: MbscEventcalendarOptions, state: MbscEventcalendarState): void;
    protected _updated(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<MbscEventcalendar, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<MbscEventcalendar, "mbsc-eventcalendar", never, { "actionableEvents": "actionableEvents"; "agendaTemplate": "agendaTemplate"; "calendarSystem": "calendarSystem"; "clickToCreate": "clickToCreate"; "colors": "colors"; "connections": "connections"; "data": "data"; "dayTemplate": "dayTemplate"; "dayContentTemplate": "dayContentTemplate"; "dayFooterTemplate": "dayFooterTemplate"; "dataTimezone": "dataTimezone"; "displayTimezone": "displayTimezone"; "dragTimeStep": "dragTimeStep"; "dragToCreate": "dragToCreate"; "dragToResize": "dragToResize"; "dragToMove": "dragToMove"; "eventContentTemplate": "eventContentTemplate"; "eventDelete": "eventDelete"; "eventOrder": "eventOrder"; "eventTemplate": "eventTemplate"; "exclusiveEndDates": "exclusiveEndDates"; "extendDefaultEvent": "extendDefaultEvent"; "externalDrop": "externalDrop"; "groupBy": "groupBy"; "headerTemplate": "headerTemplate"; "height": "height"; "invalid": "invalid"; "invalidateEvent": "invalidateEvent"; "labelContentTemplate": "labelContentTemplate"; "labels": "labels"; "labelTemplate": "labelTemplate"; "marked": "marked"; "max": "max"; "min": "min"; "mousewheel": "mousewheel"; "refDate": "refDate"; "resources": "resources"; "resourceHeaderTemplate": "resourceHeaderTemplate"; "resourceFooterTemplate": "resourceFooterTemplate"; "resourceTemplate": "resourceTemplate"; "slots": "slots"; "slotTemplate": "slotTemplate"; "scheduleEventContentTemplate": "scheduleEventContentTemplate"; "scheduleEventTemplate": "scheduleEventTemplate"; "selectedDate": "selectedDate"; "selectedEvents": "selectedEvents"; "selectMultipleEvents": "selectMultipleEvents"; "showControls": "showControls"; "showEventTooltip": "showEventTooltip"; "sidebarFooterTemplate": "sidebarFooterTemplate"; "sidebarHeaderTemplate": "sidebarHeaderTemplate"; "sidebarTemplate": "sidebarTemplate"; "valid": "valid"; "view": "view"; "width": "width"; "allDayText": "allDayText"; "amText": "amText"; "dateFormat": "dateFormat"; "dateFormatLong": "dateFormatLong"; "dayNames": "dayNames"; "dayNamesMin": "dayNamesMin"; "dayNamesShort": "dayNamesShort"; "eventsText": "eventsText"; "eventText": "eventText"; "firstDay": "firstDay"; "monthNames": "monthNames"; "monthNamesShort": "monthNamesShort"; "moreEventsPluralText": "moreEventsPluralText"; "moreEventsText": "moreEventsText"; "newEventText": "newEventText"; "nextPageText": "nextPageText"; "noEventsText": "noEventsText"; "pmText": "pmText"; "prevPageText": "prevPageText"; "timeFormat": "timeFormat"; "timezonePlugin": "timezonePlugin"; }, { "selectedDateChange": "selectedDateChange"; "selectedEventsChange": "selectedEventsChange"; "onCellClick": "onCellClick"; "onCellDoubleClick": "onCellDoubleClick"; "onCellRightClick": "onCellRightClick"; "onCellHoverIn": "onCellHoverIn"; "onCellHoverOut": "onCellHoverOut"; "onEventClick": "onEventClick"; "onEventDoubleClick": "onEventDoubleClick"; "onEventRightClick": "onEventRightClick"; "onEventHoverIn": "onEventHoverIn"; "onEventHoverOut": "onEventHoverOut"; "onEventCreate": "onEventCreate"; "onEventCreated": "onEventCreated"; "onEventDelete": "onEventDelete"; "onEventDeleted": "onEventDeleted"; "onEventDragEnd": "onEventDragEnd"; "onEventDragStart": "onEventDragStart"; "onEventUpdate": "onEventUpdate"; "onEventUpdated": "onEventUpdated"; "onEventCreateFailed": "onEventCreateFailed"; "onEventUpdateFailed": "onEventUpdateFailed"; "onLabelClick": "onLabelClick"; "onSelectedEventsChange": "onSelectedEventsChange"; "onPageChange": "onPageChange"; "onPageLoaded": "onPageLoaded"; "onPageLoading": "onPageLoading"; "onResourceCollapse": "onResourceCollapse"; "onResourceExpand": "onResourceExpand"; "onSelectedDateChange": "onSelectedDateChange"; }, never, never>;
}
